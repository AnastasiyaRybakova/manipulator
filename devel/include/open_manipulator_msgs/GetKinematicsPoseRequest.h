// Generated by gencpp from file open_manipulator_msgs/GetKinematicsPoseRequest.msg
// DO NOT EDIT!


#ifndef OPEN_MANIPULATOR_MSGS_MESSAGE_GETKINEMATICSPOSEREQUEST_H
#define OPEN_MANIPULATOR_MSGS_MESSAGE_GETKINEMATICSPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_manipulator_msgs
{
template <class ContainerAllocator>
struct GetKinematicsPoseRequest_
{
  typedef GetKinematicsPoseRequest_<ContainerAllocator> Type;

  GetKinematicsPoseRequest_()
    : planning_group()
    , end_effector_name()  {
    }
  GetKinematicsPoseRequest_(const ContainerAllocator& _alloc)
    : planning_group(_alloc)
    , end_effector_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _planning_group_type;
  _planning_group_type planning_group;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _end_effector_name_type;
  _end_effector_name_type end_effector_name;





  typedef boost::shared_ptr< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetKinematicsPoseRequest_

typedef ::open_manipulator_msgs::GetKinematicsPoseRequest_<std::allocator<void> > GetKinematicsPoseRequest;

typedef boost::shared_ptr< ::open_manipulator_msgs::GetKinematicsPoseRequest > GetKinematicsPoseRequestPtr;
typedef boost::shared_ptr< ::open_manipulator_msgs::GetKinematicsPoseRequest const> GetKinematicsPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator1> & lhs, const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.planning_group == rhs.planning_group &&
    lhs.end_effector_name == rhs.end_effector_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator1> & lhs, const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_manipulator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14dd5674451c0fe6eacac0ded7197f30";
  }

  static const char* value(const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14dd5674451c0fe6ULL;
  static const uint64_t static_value2 = 0xeacac0ded7197f30ULL;
};

template<class ContainerAllocator>
struct DataType< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_manipulator_msgs/GetKinematicsPoseRequest";
  }

  static const char* value(const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string planning_group\n"
"string end_effector_name\n"
;
  }

  static const char* value(const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planning_group);
      stream.next(m.end_effector_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetKinematicsPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_manipulator_msgs::GetKinematicsPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "planning_group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.planning_group);
    s << indent << "end_effector_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.end_effector_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_MANIPULATOR_MSGS_MESSAGE_GETKINEMATICSPOSEREQUEST_H
